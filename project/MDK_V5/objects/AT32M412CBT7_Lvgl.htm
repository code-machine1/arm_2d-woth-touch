<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\AT32M412CBT7_Lvgl.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\AT32M412CBT7_Lvgl.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Sun Jun 22 14:02:28 2025
<BR><P>
<H3>Maximum Stack Usage =       1612 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__pfb_draw_scene_mono_clock_handler &rArr; arm_lcd_printf &rArr; arm_lcd_puts &rArr; lcd_draw_char &rArr; arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c]">SysTick_Handler</a>
 <LI><a href="#[1e2]">__ensure_systick_wrapper</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[bb]">__arm_2d_helper_pfb_report_rendering_complete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a4]">arm_2d_helper_pfb_flush</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3e]">$Super$$SysTick_Handler</a> from lto-llvm-1ddb82.o(.text.SysTick_Handler) referenced from systick_wrapper_gnu.o(.text)
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[50]">ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER</a> from lto-llvm-1ddb82.o(.text.ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER) referenced from lto-llvm-1ddb82.o(.rodata.ARM_2D_FONT_6x8)
 <LI><a href="#[7]">BusFault_Handler</a> from lto-llvm-1ddb82.o(.text.BusFault_Handler) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[23]">CAN1_ERR_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[21]">CAN1_RX_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[22]">CAN1_STAT_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[37]">CMP2_1_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[12]">CRM_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[39]">DMAMUX_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from lto-llvm-1ddb82.o(.text.DebugMon_Handler) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[34]">ERTCAlarm_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[10]">ERTC_WKUP_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[13]">EXINT0_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[33]">EXINT15_10_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[14]">EXINT1_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[15]">EXINT2_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[16]">EXINT3_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[17]">EXINT4_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[24]">EXINT9_5_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[38]">FPU_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from lto-llvm-1ddb82.o(.text.HardFault_Handler) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[2c]">I2C1_ERR_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[2b]">I2C1_EVT_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[2e]">I2C2_ERR_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[2d]">I2C2_EVT_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from lto-llvm-1ddb82.o(.text.MemManage_Handler) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from lto-llvm-1ddb82.o(.text.NMI_Handler) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[e]">PVM_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from lto-llvm-1ddb82.o(.text.PendSV_Handler) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from lto-llvm-1ddb82.o(.text.SVC_Handler) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from systick_wrapper_gnu.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[3b]">SystemInit</a> from lto-llvm-1ddb82.o(.text.SystemInit) referenced from startup_at32m412_416.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[25]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[28]">TMR1_CH_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[26]">TMR1_OVF_TMR10_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[27]">TMR1_TRG_HALL_TMR11_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[29]">TMR3_GLOBAL_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[2a]">TMR4_GLOBAL_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[35]">TMR6_DAC_GLOBAL_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[36]">TMR7_GLOBAL_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from lto-llvm-1ddb82.o(.text.USART1_IRQHandler) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from at32_usart.o(.text.USART2_IRQHandler) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from lto-llvm-1ddb82.o(.text.UsageFault_Handler) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[d]">WWDT_IRQHandler</a> from startup_at32m412_416.o(.text) referenced from startup_at32m412_416.o(RESET)
 <LI><a href="#[55]">__arm_2d_c8bit_sw_colour_filling</a> from lto-llvm-1ddb82.o(.text.__arm_2d_c8bit_sw_colour_filling) referenced from lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_C8BIT)
 <LI><a href="#[51]">__arm_2d_lcd_text_default_a1_font_draw_char</a> from lto-llvm-1ddb82.o(.text.__arm_2d_lcd_text_default_a1_font_draw_char) referenced from lto-llvm-1ddb82.o(.rodata.ARM_2D_FONT_6x8)
 <LI><a href="#[51]">__arm_2d_lcd_text_default_a1_font_draw_char</a> from lto-llvm-1ddb82.o(.text.__arm_2d_lcd_text_default_a1_font_draw_char) referenced from lto-llvm-1ddb82.o(.rodata.ARM_2D_FONT_SQUARE_DIGITS_24_A1)
 <LI><a href="#[57]">__arm_2d_rgb16_sw_colour_filling</a> from lto-llvm-1ddb82.o(.text.__arm_2d_rgb16_sw_colour_filling) referenced from lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_RGB16)
 <LI><a href="#[53]">__arm_2d_rgb16_sw_draw_pattern</a> from lto-llvm-1ddb82.o(.text.__arm_2d_rgb16_sw_draw_pattern) referenced from lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_DRAW_PATTERN_RGB16)
 <LI><a href="#[58]">__arm_2d_rgb32_sw_colour_filling</a> from lto-llvm-1ddb82.o(.text.__arm_2d_rgb32_sw_colour_filling) referenced from lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_RGB32)
 <LI><a href="#[54]">__arm_2d_rgb565_sw_colour_filling_with_a1_mask_and_opacity</a> from lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_sw_colour_filling_with_a1_mask_and_opacity) referenced from lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_A1_MASK_AND_OPACITY_RGB565)
 <LI><a href="#[56]">__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity</a> from lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity) referenced from lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_MASK_AND_OPACITY_RGB565)
 <LI><a href="#[59]">__arm_2d_rgb565_sw_colour_filling_with_mask_opacity_and_transform</a> from lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_sw_colour_filling_with_mask_opacity_and_transform) referenced from lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_WITH_MSK_OPACITY_AND_TRANSFORM_RGB565)
 <LI><a href="#[5a]">__arm_2d_rgb565_sw_colour_filling_with_opacity</a> from lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_sw_colour_filling_with_opacity) referenced from lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_WITH_OPACITY_RGB565)
 <LI><a href="#[44]">__disp_adapter0_draw_navigation</a> from lto-llvm-1ddb82.o(.text.__disp_adapter0_draw_navigation) referenced 2 times from lto-llvm-1ddb82.o(.text.__arm_2d_scene_player_register_on_draw_navigation_event_handler)
 <LI><a href="#[4e]">__disp_adapter0_pfb_render_handler</a> from lto-llvm-1ddb82.o(.text.__disp_adapter0_pfb_render_handler) referenced from lto-llvm-1ddb82.o(.rodata..L__const.__user_scene_player_init.tCFG)
 <LI><a href="#[3c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32m412_416.o(.text)
 <LI><a href="#[4f]">__on_each_frame_complete</a> from lto-llvm-1ddb82.o(.text.__on_each_frame_complete) referenced from lto-llvm-1ddb82.o(.rodata..L__const.__user_scene_player_init.tCFG)
 <LI><a href="#[2]">__on_frame_complete</a> from lto-llvm-1ddb82.o(.text.__on_frame_complete) referenced 2 times from lto-llvm-1ddb82.o(.data.disp_adapter0_init.s_tScenes)
 <LI><a href="#[1]">__on_frame_start</a> from lto-llvm-1ddb82.o(.text.__on_frame_start) referenced 2 times from lto-llvm-1ddb82.o(.data.disp_adapter0_init.s_tScenes)
 <LI><a href="#[43]">__on_scene_mono_clock_depose</a> from lto-llvm-1ddb82.o(.text.__on_scene_mono_clock_depose) referenced 2 times from lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init)
 <LI><a href="#[42]">__on_scene_mono_clock_frame_complete</a> from lto-llvm-1ddb82.o(.text.__on_scene_mono_clock_frame_complete) referenced 2 times from lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init)
 <LI><a href="#[41]">__on_scene_mono_clock_frame_start</a> from lto-llvm-1ddb82.o(.text.__on_scene_mono_clock_frame_start) referenced 2 times from lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init)
 <LI><a href="#[40]">__on_scene_mono_clock_load</a> from lto-llvm-1ddb82.o(.text.__on_scene_mono_clock_load) referenced 2 times from lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init)
 <LI><a href="#[5b]">__perf_counter_init</a> from lto-llvm-1ddb82.o(.text.__perf_counter_init) referenced from lto-llvm-1ddb82.o(.init_array)
 <LI><a href="#[0]">__pfb_draw_handler</a> from lto-llvm-1ddb82.o(.text.__pfb_draw_handler) referenced 2 times from lto-llvm-1ddb82.o(.data.disp_adapter0_init.s_tScenes)
 <LI><a href="#[46]">__pfb_draw_scene_background_handler</a> from lto-llvm-1ddb82.o(.text.__pfb_draw_scene_background_handler) referenced 2 times from lto-llvm-1ddb82.o(.text.arm_2d_scene_player_task)
 <LI><a href="#[45]">__pfb_draw_scene_handler</a> from lto-llvm-1ddb82.o(.text.__pfb_draw_scene_handler) referenced 4 times from lto-llvm-1ddb82.o(.text.arm_2d_scene_player_task)
 <LI><a href="#[3f]">__pfb_draw_scene_mono_clock_handler</a> from lto-llvm-1ddb82.o(.text.__pfb_draw_scene_mono_clock_handler) referenced 2 times from lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init)
 <LI><a href="#[52]">__utf8_a1_font_get_char_descriptor.678</a> from lto-llvm-1ddb82.o(.text.__utf8_a1_font_get_char_descriptor.678) referenced from lto-llvm-1ddb82.o(.rodata.ARM_2D_FONT_SQUARE_DIGITS_24_A1)
 <LI><a href="#[4d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[3a]">main</a> from lto-llvm-1ddb82.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3d]">perfc_port_insert_to_system_timer_insert_ovf_handler</a> from lto-llvm-1ddb82.o(.text.perfc_port_insert_to_system_timer_insert_ovf_handler) referenced from systick_wrapper_gnu.o(.text)
 <LI><a href="#[49]">tmt_create</a> from lto-llvm-1ddb82.o(.text.tmt_create) referenced 2 times from lto-llvm-1ddb82.o(.text.tmt_init)
 <LI><a href="#[4a]">tmt_delete</a> from lto-llvm-1ddb82.o(.text.tmt_delete) referenced 2 times from lto-llvm-1ddb82.o(.text.tmt_init)
 <LI><a href="#[47]">tmt_run</a> from lto-llvm-1ddb82.o(.text.tmt_run) referenced 2 times from lto-llvm-1ddb82.o(.text.tmt_init)
 <LI><a href="#[4c]">tmt_run_ctrl</a> from lto-llvm-1ddb82.o(.text.tmt_run_ctrl) referenced 2 times from lto-llvm-1ddb82.o(.text.tmt_init)
 <LI><a href="#[4b]">tmt_time_ctrl</a> from lto-llvm-1ddb82.o(.text.tmt_time_ctrl) referenced 2 times from lto-llvm-1ddb82.o(.text.tmt_init)
 <LI><a href="#[48]">tmt_update_tick</a> from lto-llvm-1ddb82.o(.text.tmt_update_tick) referenced 2 times from lto-llvm-1ddb82.o(.text.tmt_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(.text)
</UL>
<P><STRONG><a name="[1dc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[71]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1dd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[5f]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1de]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1df]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_STAT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CMP2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMAMUX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ERTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ERTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXINT15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXINT9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR1_OVF_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR1_TRG_HALL_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TMR6_DAC_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32m412_416.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, systick_wrapper_gnu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[1e2]"></a>__ensure_systick_wrapper</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, systick_wrapper_gnu.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__utf8_a1_font_get_char_descriptor.678
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_each_frame_complete
</UL>

<P><STRONG><a name="[1e3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_each_frame_complete
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1e4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1e5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1e6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_scene_player_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
</UL>

<P><STRONG><a name="[1e8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>

<P><STRONG><a name="[6c]"></a>_frem</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, frem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _frem &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[64]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[63]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[70]"></a>_ffix_r</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ffix_r
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1e9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[6d]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_insert_to_system_timer_insert_ovf_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_scene_mono_clock_frame_start
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_convert_ticks_to_ms
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a1_font_draw_char
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_tile_process
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_register_on_draw_navigation_event_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_init
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_scene_player_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
</UL>

<P><STRONG><a name="[75]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_preprocess_source
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_each_frame_complete
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_each_frame_complete
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_preprocess_source
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_each_frame_complete
</UL>

<P><STRONG><a name="[1ec]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>LCD_Address_Set</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcd_init.o(.text.LCD_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
</UL>

<P><STRONG><a name="[7f]"></a>LCD_Clear</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcd.o(.text.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LCD_Clear &rArr; LCD_Fill &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>LCD_Fill</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lcd.o(.text.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LCD_Fill &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_halfwords
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[84]"></a>LCD_Init</STRONG> (Thumb, 664 bytes, Stack size 88 bytes, lcd_init.o(.text.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = LCD_Init &rArr; LCD_direction &rArr; LCD_WriteReg &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_direction
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>LCD_ShowPicture</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lcd.o(.text.LCD_ShowPicture))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LCD_ShowPicture &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_bytes
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp0_DrawBitmap
</UL>

<P><STRONG><a name="[7e]"></a>LCD_WR_DATA</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lcd_init.o(.text.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[87]"></a>LCD_WR_DATA8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcd_init.o(.text.LCD_WR_DATA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_WR_DATA8 &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[7d]"></a>LCD_WR_REG</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lcd_init.o(.text.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[89]"></a>LCD_Writ_Bus</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lcd_init.o(.text.LCD_Writ_Bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read_byte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>

<P><STRONG><a name="[8b]"></a>LCD_WriteReg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd_init.o(.text.LCD_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_WriteReg &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_direction
</UL>

<P><STRONG><a name="[86]"></a>LCD_direction</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lcd_init.o(.text.LCD_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_direction &rArr; LCD_WriteReg &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>$Super$$SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = $Super$$SysTick_Handler &rArr; wk_timebase_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systick_wrapper_gnu.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>SystemInit</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, at32_usart.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART2_IRQHandler &rArr; queue_read &rArr; queue_isEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32m412_416.o(RESET)
</UL>
<P><STRONG><a name="[19c]"></a>XPT2046_TouchInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touch.o(.text.XPT2046_TouchInit))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>dma_channel_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_bytes
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_halfwords
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>dma_default_para_init</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.dma_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dma_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_bytes
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_halfwords
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel3_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel2_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel1_init
</UL>

<P><STRONG><a name="[1ae]"></a>dma_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.dma_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dma_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_bytes
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_halfwords
</UL>

<P><STRONG><a name="[1ad]"></a>dma_flag_get</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.dma_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_bytes
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_halfwords
</UL>

<P><STRONG><a name="[1aa]"></a>dma_init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_bytes
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_halfwords
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel3_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel2_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel1_init
</UL>

<P><STRONG><a name="[1a8]"></a>dma_reset</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.dma_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_bytes
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_halfwords
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel3_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel2_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel1_init
</UL>

<P><STRONG><a name="[187]"></a>fputc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[81]"></a>gpio_bits_reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.gpio_bits_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
</UL>

<P><STRONG><a name="[83]"></a>gpio_bits_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.gpio_bits_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bits_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
</UL>

<P><STRONG><a name="[3a]"></a>main</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1604<LI>Call Chain = main &rArr; __disp_adapter0_task &rArr; arm_2d_scene_player_task &rArr; arm_2d_helper_pfb_task &rArr; arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XPT2046_TouchInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_task
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_switch_to_next_scene
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmt_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_wdt_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_spi2_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel3_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel2_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma_channel_config
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel1_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_periph_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3d]"></a>perfc_port_insert_to_system_timer_insert_ovf_handler</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.perfc_port_insert_to_system_timer_insert_ovf_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = perfc_port_insert_to_system_timer_insert_ovf_handler &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_get_system_timer_top
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_resume_global_interrupt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_disable_global_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systick_wrapper_gnu.o(.text)
</UL>
<P><STRONG><a name="[1a6]"></a>queue_isEmpty</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, util_queue.o(.text.queue_isEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = queue_isEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
</UL>

<P><STRONG><a name="[1a7]"></a>queue_isFull</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, util_queue.o(.text.queue_isFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = queue_isFull
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>

<P><STRONG><a name="[91]"></a>queue_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, util_queue.o(.text.queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = queue_read &rArr; queue_isEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_isEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>queue_write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, util_queue.o(.text.queue_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = queue_write &rArr; queue_isFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_isFull
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>spi_dma_write_bytes</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, bsp_lcd_spi.o(.text.spi_dma_write_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = spi_dma_write_bytes &rArr; dma_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_receiver_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_transmitter_enable
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
</UL>

<P><STRONG><a name="[82]"></a>spi_dma_write_halfwords</STRONG> (Thumb, 324 bytes, Stack size 80 bytes, bsp_lcd_spi.o(.text.spi_dma_write_halfwords))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = spi_dma_write_halfwords &rArr; dma_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frame_bit_num_set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_receiver_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_transmitter_enable
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>

<P><STRONG><a name="[1af]"></a>spi_frame_bit_num_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.spi_frame_bit_num_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_frame_bit_num_set
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_halfwords
</UL>

<P><STRONG><a name="[1b2]"></a>spi_i2s_data_receive</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.spi_i2s_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read_byte
</UL>

<P><STRONG><a name="[1b1]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.spi_i2s_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read_byte
</UL>

<P><STRONG><a name="[1ac]"></a>spi_i2s_dma_receiver_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.spi_i2s_dma_receiver_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_dma_receiver_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read_byte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_bytes
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_halfwords
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_spi2_init
</UL>

<P><STRONG><a name="[1ab]"></a>spi_i2s_dma_transmitter_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.spi_i2s_dma_transmitter_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_dma_transmitter_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read_byte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_bytes
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_write_halfwords
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_spi2_init
</UL>

<P><STRONG><a name="[1b0]"></a>spi_i2s_flag_get</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.spi_i2s_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_i2s_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read_byte
</UL>

<P><STRONG><a name="[8a]"></a>spi_write_read_byte</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, bsp_lcd_spi.o(.text.spi_write_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_receiver_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_transmitter_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>

<P><STRONG><a name="[8e]"></a>usart_data_receive</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.usart_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>usart_data_transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>usart_flag_clear</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.usart_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>usart_flag_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>wk_delay_ms</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.wk_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wk_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_get
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1d3]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ee]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1ef]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1f0]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[175]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_printf
</UL>

<P><STRONG><a name="[117]"></a>__hardfp_fmodf</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fmodf.o(i.__hardfp_fmodf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_fmodf &rArr; _frem &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_preprocess_source
</UL>

<P><STRONG><a name="[11b]"></a>__hardfp_lroundf</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lroundf.o(i.__hardfp_lroundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_lroundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>

<P><STRONG><a name="[1d6]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[1f1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1f2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1f3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1d5]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[93]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[9b]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_free_scratch_memory
</UL>

<P><STRONG><a name="[96]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_allocate_scratch_memory
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1d7]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d4]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[1da]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d9]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[8c]"></a>wk_timebase_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.wk_timebase_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wk_timebase_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$SysTick_Handler
</UL>

<P><STRONG><a name="[18e]"></a>wk_system_clock_config</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.wk_system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wk_system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb3_div_set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwc_battery_powered_domain_access
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>crm_reset</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.crm_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_reset &rArr; crm_auto_step_mode_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[1bd]"></a>crm_periph_clock_enable</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_periph_clock_config
</UL>

<P><STRONG><a name="[1c2]"></a>pwc_battery_powered_domain_access</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.pwc_battery_powered_domain_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pwc_battery_powered_domain_access
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[182]"></a>crm_flag_get</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
</UL>

<P><STRONG><a name="[1c3]"></a>crm_clock_source_enable</STRONG> (Thumb, 162 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.crm_clock_source_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_clock_source_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[181]"></a>crm_hext_stable_wait</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.crm_hext_stable_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crm_hext_stable_wait &rArr; crm_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[1c4]"></a>crm_pll_config</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[17d]"></a>crm_ahb_div_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.crm_ahb_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crm_ahb_div_set &rArr; crm_auto_step_mode_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[1c5]"></a>crm_apb3_div_set</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.crm_apb3_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_apb3_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[1c6]"></a>crm_apb2_div_set</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.crm_apb2_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_apb2_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[1c7]"></a>crm_apb1_div_set</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.crm_apb1_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_apb1_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[17e]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.crm_auto_step_mode_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_auto_step_mode_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
</UL>

<P><STRONG><a name="[184]"></a>crm_sysclk_switch</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.crm_sysclk_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crm_sysclk_switch &rArr; crm_auto_step_mode_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[180]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
</UL>

<P><STRONG><a name="[1b3]"></a>system_core_clock_update</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[18f]"></a>wk_periph_clock_config</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.wk_periph_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wk_periph_clock_config &rArr; crm_periph_clock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>wk_nvic_config</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.wk_nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wk_nvic_config &rArr; nvic_irq_enable &rArr; NVIC_EncodePriority.104
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a2]"></a>nvic_priority_group_config</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.nvic_priority_group_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvic_priority_group_config &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[1ba]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[1bb]"></a>NVIC_EncodePriority</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[1bc]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[19d]"></a>nvic_irq_enable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvic_irq_enable &rArr; NVIC_EncodePriority.104
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority.105
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority.104
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping.103
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[191]"></a>wk_timebase_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.wk_timebase_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wk_timebase_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>wk_gpio_config</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.wk_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wk_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>wk_dma1_channel1_init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.wk_dma1_channel1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wk_dma1_channel1_init &rArr; dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>wk_dma_channel_config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.wk_dma_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wk_dma_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>wk_dma1_channel2_init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.wk_dma1_channel2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wk_dma1_channel2_init &rArr; dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmamux_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmamux_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>wk_dma1_channel3_init</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.wk_dma1_channel3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wk_dma1_channel3_init &rArr; dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmamux_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmamux_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>wk_usart1_init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.wk_usart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wk_usart1_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_control_set
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>wk_spi2_init</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.wk_spi2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wk_spi2_init &rArr; gpio_pin_mux_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_receiver_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_transmitter_enable
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_default_para_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>wk_wdt_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.wk_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wk_wdt_init &rArr; wdt_reload_value_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_counter_reload
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reload_value_set
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_divider_set
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_register_write_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>init_cycle_counter</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.init_cycle_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_cycle_counter &rArr; update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_resume_global_interrupt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_clear_system_timer_ovf_pending
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_init_system_timer
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_disable_global_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_counter_init
</UL>

<P><STRONG><a name="[19b]"></a>tmt_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.tmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>arm_2d_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_2d_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_2d_init &rArr; __arm_2d_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>disp_adapter0_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.disp_adapter0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = disp_adapter0_init &rArr; __user_scene_player_init &rArr; arm_2d_helper_pfb_init &rArr; arm_2d_helper_init &rArr; arm_2d_helper_built_in_init &rArr; busy_wheel_init &rArr; arm_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_scene_player_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_navigator_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_append_scenes
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>__arm_2d_scene_mono_clock_init</STRONG> (Thumb, 2420 bytes, Stack size 440 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = __arm_2d_scene_mono_clock_init &rArr; __arm_lcd_get_string_line_box &rArr; __arm_lcd_get_char_advance &rArr; arm_2d_helper_get_char_descriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_append_scenes
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_allocate_scratch_memory
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_get_display_area
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_string_line_box
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_font
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_scale
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async.specialized.1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>arm_2d_scene_player_switch_to_next_scene</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_2d_scene_player_switch_to_next_scene))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = arm_2d_scene_player_switch_to_next_scene &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>__disp_adapter0_task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__disp_adapter0_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1556<LI>Call Chain = __disp_adapter0_task &rArr; arm_2d_scene_player_task &rArr; arm_2d_helper_pfb_task &rArr; arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>Disp0_DrawBitmap</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.Disp0_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Disp0_DrawBitmap &rArr; LCD_ShowPicture &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_pfb_render_handler
</UL>

<P><STRONG><a name="[1c8]"></a>wk_timebase_increase</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.wk_timebase_increase))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_handler
</UL>

<P><STRONG><a name="[1b5]"></a>wk_timebase_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.wk_timebase_get))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_delay_ms
</UL>

<P><STRONG><a name="[17f]"></a>crm_clocks_freq_get</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_init
</UL>

<P><STRONG><a name="[1c9]"></a>systick_clock_source_config</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.systick_clock_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_init
</UL>

<P><STRONG><a name="[1b8]"></a>gpio_default_para_init</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.gpio_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_spi2_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
</UL>

<P><STRONG><a name="[1be]"></a>spi_default_para_init</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.spi_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_spi2_init
</UL>

<P><STRONG><a name="[1bf]"></a>gpio_pin_mux_config</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.gpio_pin_mux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pin_mux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_spi2_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[1b9]"></a>gpio_init</STRONG> (Thumb, 230 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_spi2_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
</UL>

<P><STRONG><a name="[1c0]"></a>spi_init</STRONG> (Thumb, 510 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_spi2_init
</UL>

<P><STRONG><a name="[1c1]"></a>spi_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.spi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_spi2_init
</UL>

<P><STRONG><a name="[1b4]"></a>usart_init</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[1ca]"></a>usart_transmitter_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.usart_transmitter_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_transmitter_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[1cb]"></a>usart_receiver_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.usart_receiver_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_receiver_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[1cc]"></a>usart_parity_selection_config</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.usart_parity_selection_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_parity_selection_config
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[1cd]"></a>usart_hardware_flow_control_set</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.usart_hardware_flow_control_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_hardware_flow_control_set
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[1ce]"></a>usart_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[1b6]"></a>dmamux_enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.dmamux_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmamux_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel3_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel2_init
</UL>

<P><STRONG><a name="[1b7]"></a>dmamux_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.dmamux_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmamux_init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel3_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_dma1_channel2_init
</UL>

<P><STRONG><a name="[1cf]"></a>wdt_register_write_enable</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.wdt_register_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wdt_register_write_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_wdt_init
</UL>

<P><STRONG><a name="[1d0]"></a>wdt_divider_set</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.wdt_divider_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wdt_divider_set
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_wdt_init
</UL>

<P><STRONG><a name="[1d1]"></a>wdt_reload_value_set</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.wdt_reload_value_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wdt_reload_value_set
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_wdt_init
</UL>

<P><STRONG><a name="[1d2]"></a>wdt_counter_reload</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.wdt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_wdt_init
</UL>

<P><STRONG><a name="[19e]"></a>__NVIC_GetPriorityGrouping.103</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.__NVIC_GetPriorityGrouping.103))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[19f]"></a>NVIC_EncodePriority.104</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.NVIC_EncodePriority.104))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_EncodePriority.104
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[1a0]"></a>__NVIC_SetPriority.105</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__NVIC_SetPriority.105))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority.105
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[1a1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[1a3]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
</UL>

<P><STRONG><a name="[47]"></a>tmt_run</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.tmt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tmt_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[48]"></a>tmt_update_tick</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.tmt_update_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tmt_update_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[49]"></a>tmt_create</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.tmt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmt_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[4a]"></a>tmt_delete</STRONG> (Thumb, 298 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.tmt_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmt_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[4b]"></a>tmt_time_ctrl</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.tmt_time_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmt_time_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[4c]"></a>tmt_run_ctrl</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.tmt_run_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmt_run_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[163]"></a>arm_2d_helper_init</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = arm_2d_helper_init &rArr; arm_2d_helper_built_in_init &rArr; busy_wheel_init &rArr; arm_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_convert_ms_to_ticks
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__convert_2digits_bdc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_built_in_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_reference_clock_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
</UL>

<P><STRONG><a name="[13e]"></a>arm_2d_helper_get_reference_clock_frequency</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_get_reference_clock_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_2d_helper_get_reference_clock_frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_get_system_timer_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_init
</UL>

<P><STRONG><a name="[156]"></a>arm_2d_helper_built_in_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_built_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = arm_2d_helper_built_in_init &rArr; busy_wheel_init &rArr; arm_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_init
</UL>

<P><STRONG><a name="[164]"></a>__convert_2digits_bdc</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__convert_2digits_bdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __convert_2digits_bdc
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_init
</UL>

<P><STRONG><a name="[165]"></a>arm_2d_helper_convert_ms_to_ticks</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_convert_ms_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_2d_helper_convert_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_flowing_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_init
</UL>

<P><STRONG><a name="[161]"></a>perfc_port_get_system_timer_freq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.perfc_port_get_system_timer_freq))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_reference_clock_frequency
</UL>

<P><STRONG><a name="[a7]"></a>arm_2d_helper_get_system_timestamp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_get_system_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm_2d_helper_get_system_timestamp &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_scene_mono_clock_frame_start
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_each_frame_complete
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_flowing_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_drill_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_perf_counter_stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_perf_counter_start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_is_time_out
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
</UL>

<P><STRONG><a name="[162]"></a>get_system_ticks</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.get_system_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_resume_global_interrupt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_disable_global_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>

<P><STRONG><a name="[13f]"></a>arm_2d_helper_convert_ticks_to_ms</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_convert_ticks_to_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arm_2d_helper_convert_ticks_to_ms &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_scene_mono_clock_frame_start
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[a6]"></a>__arm_2d_helper_is_time_out</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_is_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __arm_2d_helper_is_time_out &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_assert</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__utf8_a1_font_get_char_descriptor.678
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_scene_player_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_is_point_inside_region
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__load_background_virtual_resource
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_1st_derived_child_or_root
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_xy_prepare
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_preprocess_target
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_tile_transform_xy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_absolute_location
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_opacity_and_transform
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack.326
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack.325
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb32_sw_colour_filling
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb16_sw_colour_filling
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_c8bit_sw_colour_filling
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb16_sw_draw_pattern
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_opacity
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_round_corner_box
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_register_on_draw_navigation_event_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_append_scenes
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_virtual_screen_or_root
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_update_dirty_regions
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_on_frame_start
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_depose
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_dynamic_dirty_region_update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_change_user_region_index_only
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_wait_next
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_on_frame_start
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_depose
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dirty_region_item_ignore_set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_allocate_scratch_memory
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_remove_overlapped_region_horizontally
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_remove_overlapped_region_vertically
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_remove_item_from_weighted_dirty_region_list
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_add_item_to_weighted_dirty_region_list
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_pool_new
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_low_level_rendering
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_free_dirty_region_working_list
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_update_dependency
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_perf_counter_stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_perf_counter_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_is_frame_skipped
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_report_rendering_complete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_flush
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_disable_drawing_canvas_colour
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_enable_drawing_canvas_colour
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_get_absolute_location
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_get_absolute_location
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_get_display_area
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_pool_free
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_new
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_a1_mask_and_opacity
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_region_caculator
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_draw_pattern
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_get_minimal_enclosure
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scratch_memory_new
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scratch_memory_free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_char_descriptor
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb32_fill_colour
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_fill_colour
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_c8bit_fill_colour
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_fill_tile_colour
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_swap_rgb16
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_draw_box
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_is_time_out
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_switch_to_next_scene
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
</UL>

<P><STRONG><a name="[15c]"></a>arm_2d_helper_draw_box</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188<LI>Call Chain = arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async.specialized.1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[13b]"></a>arm_2dp_rgb565_fill_colour_with_opacity</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_rgb565_fill_colour_with_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116<LI>Call Chain = arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_round_corner_box
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_draw_box
</UL>

<P><STRONG><a name="[104]"></a>arm_2d_op_wait_async.specialized.1</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_2d_op_wait_async.specialized.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_2d_op_wait_async.specialized.1
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_round_corner_box
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_fill_tile_colour
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_draw_box
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
</UL>

<P><STRONG><a name="[167]"></a>arm_2d_port_wait_for_semaphore</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_2d_port_wait_for_semaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_2d_port_wait_for_semaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[b7]"></a>arm_2d_port_set_semaphore</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_2d_port_set_semaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_2d_port_set_semaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_free
</UL>

<P><STRONG><a name="[a9]"></a>arm_2d_helper_swap_rgb16</STRONG> (Thumb, 344 bytes, Stack size 88 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_swap_rgb16))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = arm_2d_helper_swap_rgb16 &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_low_level_rendering
</UL>

<P><STRONG><a name="[15d]"></a>arm_2d_helper_fill_tile_colour</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_fill_tile_colour))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = arm_2d_helper_fill_tile_colour &rArr; arm_2dp_rgb32_fill_colour &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb32_fill_colour
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_fill_colour
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_c8bit_fill_colour
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async.specialized.1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[15e]"></a>arm_2dp_c8bit_fill_colour</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_c8bit_fill_colour))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108<LI>Call Chain = arm_2dp_c8bit_fill_colour &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_fill_tile_colour
</UL>

<P><STRONG><a name="[15f]"></a>arm_2dp_rgb16_fill_colour</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_rgb16_fill_colour))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108<LI>Call Chain = arm_2dp_rgb16_fill_colour &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_fill_tile_colour
</UL>

<P><STRONG><a name="[160]"></a>arm_2dp_rgb32_fill_colour</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_rgb32_fill_colour))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108<LI>Call Chain = arm_2dp_rgb32_fill_colour &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_fill_tile_colour
</UL>

<P><STRONG><a name="[157]"></a>busy_wheel_init</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.busy_wheel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = busy_wheel_init &rArr; arm_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_built_in_init
</UL>

<P><STRONG><a name="[129]"></a>arm_2d_helper_get_utf8_byte_valid_length</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_get_utf8_byte_valid_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arm_2d_helper_get_utf8_byte_valid_length
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_string_line_box
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
</UL>

<P><STRONG><a name="[126]"></a>arm_2d_helper_get_char_descriptor</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_get_char_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = arm_2d_helper_get_char_descriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_string_line_box
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_char_advance
</UL>

<P><STRONG><a name="[150]"></a>arm_lcd_text_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = arm_lcd_text_init &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_scene_player_init
</UL>

<P><STRONG><a name="[14b]"></a>arm_lcd_text_reset_display_region_tracking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_reset_display_region_tracking))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
</UL>

<P><STRONG><a name="[13c]"></a>arm_lcd_text_set_colour</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_set_colour))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_lcd_text_set_colour
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[139]"></a>arm_lcd_text_set_target_framebuffer</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_set_target_framebuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_lcd_text_set_target_framebuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[138]"></a>arm_lcd_text_set_display_mode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_set_display_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_lcd_text_set_display_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[135]"></a>arm_lcd_text_set_opacity</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_set_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_lcd_text_set_opacity
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[136]"></a>arm_lcd_text_set_char_spacing</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_set_char_spacing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arm_lcd_text_set_char_spacing &rArr; __arm_lcd_update_spacing &rArr; mul_n_q16
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_spacing
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[130]"></a>__arm_lcd_update_spacing</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_lcd_update_spacing))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __arm_lcd_update_spacing &rArr; mul_n_q16
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_s16_q16.129
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_n_q16
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_force_updated_scale
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_line_spacing
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_char_spacing
</UL>

<P><STRONG><a name="[127]"></a>mul_n_q16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.mul_n_q16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mul_n_q16
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_string_line_box
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_char_advance
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_char_size
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_spacing
</UL>

<P><STRONG><a name="[128]"></a>reinterpret_s16_q16.129</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.reinterpret_s16_q16.129))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reinterpret_s16_q16.129
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_string_line_box
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_char_advance
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_char_size
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_spacing
</UL>

<P><STRONG><a name="[137]"></a>arm_lcd_text_set_line_spacing</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_set_line_spacing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arm_lcd_text_set_line_spacing &rArr; __arm_lcd_update_spacing &rArr; mul_n_q16
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_spacing
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[176]"></a>arm_lcd_text_get_actual_char_box</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_get_actual_char_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_lcd_text_get_actual_char_box
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_puts
</UL>

<P><STRONG><a name="[101]"></a>arm_lcd_text_set_scale</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_set_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = arm_lcd_text_set_scale &rArr; __arm_lcd_text_force_updated_scale &rArr; __arm_lcd_text_update_char_buffer &rArr; arm_2d_scratch_memory_new &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_force_updated_scale
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_q16.131
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_q16_f32.130
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
</UL>

<P><STRONG><a name="[12d]"></a>reinterpret_q16_f32.130</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.reinterpret_q16_f32.130))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reinterpret_q16_f32.130
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_force_updated_scale
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_scale
</UL>

<P><STRONG><a name="[12c]"></a>abs_q16.131</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.abs_q16.131))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = abs_q16.131
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_force_updated_scale
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_scale
</UL>

<P><STRONG><a name="[12a]"></a>__arm_lcd_text_force_updated_scale</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_lcd_text_force_updated_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = __arm_lcd_text_force_updated_scale &rArr; __arm_lcd_text_update_char_buffer &rArr; arm_2d_scratch_memory_new &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_char_size
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_update_char_buffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_q16_s16.132
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_q16.131
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_q16_f32.130
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_spacing
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_font
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_scale
</UL>

<P><STRONG><a name="[12b]"></a>reinterpret_q16_s16.132</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.reinterpret_q16_s16.132))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reinterpret_q16_s16.132
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_force_updated_scale
</UL>

<P><STRONG><a name="[12e]"></a>__arm_lcd_text_update_char_buffer</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_lcd_text_update_char_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = __arm_lcd_text_update_char_buffer &rArr; arm_2d_scratch_memory_new &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scratch_memory_new
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scratch_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_force_updated_scale
</UL>

<P><STRONG><a name="[12f]"></a>__arm_lcd_update_char_size</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_lcd_update_char_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __arm_lcd_update_char_size &rArr; __arm_lcd_update_char_draw_box
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_char_draw_box
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_s16_q16.129
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_n_q16
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_force_updated_scale
</UL>

<P><STRONG><a name="[131]"></a>arm_2d_scratch_memory_free</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_scratch_memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = arm_2d_scratch_memory_free &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_free_scratch_memory
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_update_char_buffer
</UL>

<P><STRONG><a name="[132]"></a>arm_2d_scratch_memory_new</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.arm_2d_scratch_memory_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = arm_2d_scratch_memory_new &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_allocate_scratch_memory
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_update_char_buffer
</UL>

<P><STRONG><a name="[133]"></a>__arm_lcd_update_char_draw_box</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.__arm_lcd_update_char_draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __arm_lcd_update_char_draw_box
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_draw_region
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_char_size
</UL>

<P><STRONG><a name="[14c]"></a>arm_lcd_text_force_char_use_same_width</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_force_char_use_same_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_lcd_text_force_char_use_same_width
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
</UL>

<P><STRONG><a name="[13a]"></a>arm_lcd_text_set_draw_region</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_set_draw_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arm_lcd_text_set_draw_region &rArr; __arm_lcd_update_char_draw_box
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_location
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_update_char_draw_box
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[13d]"></a>arm_lcd_text_location</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_lcd_text_location
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_font
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_draw_region
</UL>

<P><STRONG><a name="[177]"></a>__arm_lcd_draw_region_line_wrapping</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__arm_lcd_draw_region_line_wrapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __arm_lcd_draw_region_line_wrapping
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_puts
</UL>

<P><STRONG><a name="[103]"></a>arm_lcd_text_set_font</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_text_set_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = arm_lcd_text_set_font &rArr; __arm_lcd_text_force_updated_scale &rArr; __arm_lcd_text_update_char_buffer &rArr; arm_2d_scratch_memory_new &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_location
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_text_force_updated_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
</UL>

<P><STRONG><a name="[50]"></a>ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata.ARM_2D_FONT_6x8)
</UL>
<P><STRONG><a name="[125]"></a>__arm_lcd_get_char_advance</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.__arm_lcd_get_char_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = __arm_lcd_get_char_advance &rArr; arm_2d_helper_get_char_descriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_s16_q16.129
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_n_q16
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_char_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_string_line_box
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
</UL>

<P><STRONG><a name="[178]"></a>lcd_draw_char</STRONG> (Thumb, 420 bytes, Stack size 96 bytes, lto-llvm-1ddb82.o(.text.lcd_draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = lcd_draw_char &rArr; arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_draw_pattern
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_get_minimal_enclosure
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_char_advance
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_char_descriptor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_utf8_byte_valid_length
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async.specialized.1
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_puts
</UL>

<P><STRONG><a name="[a2]"></a>arm_2d_region_get_minimal_enclosure</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2d_region_get_minimal_enclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = arm_2d_region_get_minimal_enclosure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_update_dirty_regions
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
</UL>

<P><STRONG><a name="[f3]"></a>arm_2d_tile_get_root</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.arm_2d_tile_get_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_1st_derived_child_or_root
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_preprocess_source
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_valid_mask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
</UL>

<P><STRONG><a name="[16d]"></a>arm_2dp_rgb16_draw_pattern</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_rgb16_draw_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116<LI>Call Chain = arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
</UL>

<P><STRONG><a name="[e4]"></a>__arm_2d_lcd_text_default_a8_font_draw_char</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_lcd_text_default_a8_font_draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228<LI>Call Chain = __arm_2d_lcd_text_default_a8_font_draw_char &rArr; arm_2dp_tile_transform &rArr; arm_2dp_tile_transform_xy &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_tile_transform
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_prepare
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_f32_q16.138
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a1_font_draw_char
</UL>

<P><STRONG><a name="[e6]"></a>arm_2dp_rgb565_fill_colour_with_mask_and_opacity</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_rgb565_fill_colour_with_mask_and_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116<LI>Call Chain = arm_2dp_rgb565_fill_colour_with_mask_and_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_valid_mask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_round_corner_box
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a8_font_draw_char
</UL>

<P><STRONG><a name="[e7]"></a>reinterpret_f32_q16.138</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.reinterpret_f32_q16.138))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reinterpret_f32_q16.138
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a8_font_draw_char
</UL>

<P><STRONG><a name="[e8]"></a>arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_prepare</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_prepare &rArr; arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_xy_prepare &rArr; __arm_2d_transform_preprocess_source &rArr; arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_xy_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a8_font_draw_char
</UL>

<P><STRONG><a name="[e9]"></a>arm_2dp_tile_transform</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_tile_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172<LI>Call Chain = arm_2dp_tile_transform &rArr; arm_2dp_tile_transform_xy &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_tile_transform_xy
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a8_font_draw_char
</UL>

<P><STRONG><a name="[51]"></a>__arm_2d_lcd_text_default_a1_font_draw_char</STRONG> (Thumb, 304 bytes, Stack size 136 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_lcd_text_default_a1_font_draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 1364<LI>Call Chain = __arm_2d_lcd_text_default_a1_font_draw_char &rArr; __arm_2d_lcd_text_default_a8_font_draw_char &rArr; arm_2dp_tile_transform &rArr; arm_2dp_tile_transform_xy &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_a1_mask_and_opacity
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_c8bit_draw_pattern_fg_only
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_region_caculator
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a8_font_draw_char
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lto-llvm-1ddb82.o(.rodata.ARM_2D_FONT_SQUARE_DIGITS_24_A1)
<LI> lto-llvm-1ddb82.o(.rodata.ARM_2D_FONT_6x8)
</UL>
<P><STRONG><a name="[e2]"></a>__arm_2d_tile_region_caculator</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_tile_region_caculator))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = __arm_2d_tile_region_caculator &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_root
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_virtual_screen_or_root
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a1_font_draw_char
</UL>

<P><STRONG><a name="[e3]"></a>__arm_2d_impl_c8bit_draw_pattern_fg_only</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_c8bit_draw_pattern_fg_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __arm_2d_impl_c8bit_draw_pattern_fg_only
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a1_font_draw_char
</UL>

<P><STRONG><a name="[b2]"></a>arm_2d_tile_generate_child</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2d_tile_generate_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = arm_2d_tile_generate_child &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clip_asset_tile
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_non_negtive_location_pave
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_clipped_pave
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_tile_transform_xy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_round_corner_box
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_is_region_being_drawing
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a1_font_draw_char
</UL>

<P><STRONG><a name="[e5]"></a>arm_2dp_rgb565_fill_colour_with_a1_mask_and_opacity</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_rgb565_fill_colour_with_a1_mask_and_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116<LI>Call Chain = arm_2dp_rgb565_fill_colour_with_a1_mask_and_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_valid_mask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_lcd_text_default_a1_font_draw_char
</UL>

<P><STRONG><a name="[102]"></a>__arm_lcd_get_string_line_box</STRONG> (Thumb, 564 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.__arm_lcd_get_string_line_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = __arm_lcd_get_string_line_box &rArr; __arm_lcd_get_char_advance &rArr; arm_2d_helper_get_char_descriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_char_advance
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_s16_q16.129
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_n_q16
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_char_descriptor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_utf8_byte_valid_length
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
</UL>

<P><STRONG><a name="[14a]"></a>arm_lcd_puts</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236<LI>Call Chain = arm_lcd_puts &rArr; lcd_draw_char &rArr; arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_is_region_active0
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_draw_region_line_wrapping
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_get_actual_char_box
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_printf
</UL>

<P><STRONG><a name="[b9]"></a>__arm_2d_helper_pfb_is_region_active0</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_pfb_is_region_active0))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = __arm_2d_helper_pfb_is_region_active0 &rArr; arm_2d_helper_pfb_is_region_being_drawing &rArr; __arm_2d_tile_get_virtual_screen_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_is_region_being_drawing
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_puts
</UL>

<P><STRONG><a name="[140]"></a>arm_lcd_printf</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.arm_lcd_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268<LI>Call Chain = arm_lcd_printf &rArr; arm_lcd_puts &rArr; lcd_draw_char &rArr; arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_mono_clock_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[aa]"></a>__arm_2d_helper_pfb_new</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_pfb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = __arm_2d_helper_pfb_new &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_low_level_rendering
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
</UL>

<P><STRONG><a name="[ab]"></a>__arm_2d_helper_pfb_free</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_pfb_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __arm_2d_helper_pfb_free &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_port_set_semaphore
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_low_level_rendering
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_report_rendering_complete
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
</UL>

<P><STRONG><a name="[14f]"></a>arm_2d_helper_pfb_init</STRONG> (Thumb, 970 bytes, Stack size 104 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_pfb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = arm_2d_helper_pfb_init &rArr; arm_2d_helper_init &rArr; arm_2d_helper_built_in_init &rArr; busy_wheel_init &rArr; arm_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_pool_free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_free
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_scene_player_init
</UL>

<P><STRONG><a name="[9d]"></a>__arm_2d_helper_dirty_region_pool_free</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_dirty_region_pool_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __arm_2d_helper_dirty_region_pool_free &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_free_scratch_memory
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_free_dirty_region_working_list
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
</UL>

<P><STRONG><a name="[9a]"></a>__arm_2d_free_scratch_memory</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_free_scratch_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __arm_2d_free_scratch_memory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_scene_mono_clock_depose
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_depose
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_pool_free
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scratch_memory_free
</UL>

<P><STRONG><a name="[100]"></a>arm_2d_helper_pfb_get_display_area</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_pfb_get_display_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = arm_2d_helper_pfb_get_display_area &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
</UL>

<P><STRONG><a name="[99]"></a>arm_2d_helper_pfb_get_absolute_location</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_pfb_get_absolute_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = arm_2d_helper_pfb_get_absolute_location &rArr; arm_2d_get_absolute_location &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_get_absolute_location
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_dynamic_dirty_region_update
</UL>

<P><STRONG><a name="[155]"></a>arm_2d_get_absolute_location</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_get_absolute_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = arm_2d_get_absolute_location &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_absolute_location
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_get_absolute_location
</UL>

<P><STRONG><a name="[b6]"></a>__arm_2d_helper_pfb_enable_drawing_canvas_colour</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_pfb_enable_drawing_canvas_colour))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = __arm_2d_helper_pfb_enable_drawing_canvas_colour &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
</UL>

<P><STRONG><a name="[ae]"></a>__arm_2d_helper_pfb_disable_drawing_canvas_colour</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_pfb_disable_drawing_canvas_colour))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __arm_2d_helper_pfb_disable_drawing_canvas_colour &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
</UL>

<P><STRONG><a name="[a4]"></a>arm_2d_helper_pfb_flush</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_pfb_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = arm_2d_helper_pfb_flush &rArr; __arm_2d_helper_pfb_report_rendering_complete &rArr;  arm_2d_helper_pfb_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_report_rendering_complete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_enqueue_pfb
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_report_rendering_complete
</UL>

<P><STRONG><a name="[bb]"></a>__arm_2d_helper_pfb_report_rendering_complete</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_pfb_report_rendering_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + In Cycle
<LI>Call Chain = __arm_2d_helper_pfb_report_rendering_complete &rArr;  arm_2d_helper_pfb_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_flush
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_free
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_pfb_render_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_flush
</UL>

<P><STRONG><a name="[145]"></a>arm_2d_helper_is_frame_skipped</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_is_frame_skipped))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = arm_2d_helper_is_frame_skipped &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_each_frame_complete
</UL>

<P><STRONG><a name="[ac]"></a>__arm_2d_helper_perf_counter_start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_perf_counter_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_helper_perf_counter_start &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[ad]"></a>__arm_2d_helper_perf_counter_stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_perf_counter_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_helper_perf_counter_stop &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[10c]"></a>arm_2d_helper_pfb_update_dependency</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_pfb_update_dependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = arm_2d_helper_pfb_update_dependency &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_register_on_draw_navigation_event_handler
</UL>

<P><STRONG><a name="[166]"></a>arm_2d_helper_pfb_task</STRONG> (Thumb, 1302 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_pfb_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1260<LI>Call Chain = arm_2d_helper_pfb_task &rArr; arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_free_dirty_region_working_list
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_perf_counter_stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_perf_counter_start
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_fill_tile_colour
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_port_wait_for_semaphore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async.specialized.1
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_draw_box
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
</UL>

<P><STRONG><a name="[af]"></a>__arm_2d_helper_pfb_drawing_iteration_begin</STRONG> (Thumb, 2756 bytes, Stack size 216 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_pfb_drawing_iteration_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = __arm_2d_helper_pfb_drawing_iteration_begin &rArr; __arm_2d_helper_update_dirty_region_working_list &rArr; __arm_2d_helper_dirty_region_pool_new &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_set_default_frame_buffer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_get_next_dirty_region
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_new
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[b5]"></a>__arm_2d_helper_pfb_drawing_iteration_end</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_pfb_drawing_iteration_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = __arm_2d_helper_pfb_drawing_iteration_end &rArr; __arm_2d_helper_low_level_rendering &rArr; __arm_2d_helper_enqueue_pfb &rArr; arm_2d_helper_pfb_flush &rArr; __arm_2d_helper_pfb_report_rendering_complete &rArr;  arm_2d_helper_pfb_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_low_level_rendering
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_set_default_frame_buffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_get_next_dirty_region
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[a5]"></a>__arm_2d_helper_free_dirty_region_working_list</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_free_dirty_region_working_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = __arm_2d_helper_free_dirty_region_working_list &rArr; __arm_2d_helper_dirty_region_pool_free &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_pool_free
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[b0]"></a>arm_2d_region_intersect</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.arm_2d_region_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_1st_derived_child_or_root
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_virtual_screen_or_root
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
</UL>

<P><STRONG><a name="[b1]"></a>__arm_2d_helper_pfb_get_next_dirty_region</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_pfb_get_next_dirty_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __arm_2d_helper_pfb_get_next_dirty_region &rArr; __when_dirty_region_list_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__when_dirty_region_list_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
</UL>

<P><STRONG><a name="[b3]"></a>__arm_2d_helper_update_dirty_region_working_list</STRONG> (Thumb, 1384 bytes, Stack size 120 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_update_dirty_region_working_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = __arm_2d_helper_update_dirty_region_working_list &rArr; __arm_2d_helper_dirty_region_pool_new &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_remove_overlapped_region_horizontally
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_remove_overlapped_region_vertically
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_is_region_inside_target
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_remove_item_from_weighted_dirty_region_list
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_add_item_to_weighted_dirty_region_list
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_pool_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_pool_free
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_get_minimal_enclosure
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
</UL>

<P><STRONG><a name="[b4]"></a>arm_2d_set_default_frame_buffer</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.arm_2d_set_default_frame_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arm_2d_set_default_frame_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
</UL>

<P><STRONG><a name="[a8]"></a>__arm_2d_helper_low_level_rendering</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_low_level_rendering))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = __arm_2d_helper_low_level_rendering &rArr; __arm_2d_helper_enqueue_pfb &rArr; arm_2d_helper_pfb_flush &rArr; __arm_2d_helper_pfb_report_rendering_complete &rArr;  arm_2d_helper_pfb_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_enqueue_pfb
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_new
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_swap_rgb16
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_end
</UL>

<P><STRONG><a name="[b8]"></a>__when_dirty_region_list_is_empty</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__when_dirty_region_list_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __when_dirty_region_list_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_get_next_dirty_region
</UL>

<P><STRONG><a name="[a3]"></a>__arm_2d_helper_enqueue_pfb</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_enqueue_pfb))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = __arm_2d_helper_enqueue_pfb &rArr; arm_2d_helper_pfb_flush &rArr; __arm_2d_helper_pfb_report_rendering_complete &rArr;  arm_2d_helper_pfb_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_low_level_rendering
</UL>

<P><STRONG><a name="[9e]"></a>__arm_2d_helper_dirty_region_pool_new</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_dirty_region_pool_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = __arm_2d_helper_dirty_region_pool_new &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_allocate_scratch_memory
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
</UL>

<P><STRONG><a name="[9c]"></a>__arm_2d_helper_add_item_to_weighted_dirty_region_list</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_add_item_to_weighted_dirty_region_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = __arm_2d_helper_add_item_to_weighted_dirty_region_list &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
</UL>

<P><STRONG><a name="[bc]"></a>__arm_2d_helper_remove_item_from_weighted_dirty_region_list</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_remove_item_from_weighted_dirty_region_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_helper_remove_item_from_weighted_dirty_region_list &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
</UL>

<P><STRONG><a name="[bd]"></a>arm_2d_is_region_inside_target</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2d_is_region_inside_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = arm_2d_is_region_inside_target &rArr; arm_2d_is_point_inside_region &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_is_point_inside_region
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
</UL>

<P><STRONG><a name="[be]"></a>__arm_2d_remove_overlapped_region_vertically</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_remove_overlapped_region_vertically))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_remove_overlapped_region_vertically &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
</UL>

<P><STRONG><a name="[bf]"></a>__arm_2d_remove_overlapped_region_horizontally</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_remove_overlapped_region_horizontally))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_remove_overlapped_region_horizontally &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_update_dirty_region_working_list
</UL>

<P><STRONG><a name="[95]"></a>__arm_2d_allocate_scratch_memory</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_allocate_scratch_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_pool_new
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scratch_memory_new
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
</UL>

<P><STRONG><a name="[147]"></a>arm_2d_dirty_region_item_ignore_set</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.arm_2d_dirty_region_item_ignore_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = arm_2d_dirty_region_item_ignore_set &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_scene_mono_clock_frame_start
</UL>

<P><STRONG><a name="[15a]"></a>arm_2d_helper_pfb_append_dirty_regions_to_list</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_pfb_append_dirty_regions_to_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_2d_helper_pfb_append_dirty_regions_to_list
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_init
</UL>

<P><STRONG><a name="[158]"></a>arm_2d_helper_pfb_remove_dirty_regions_from_list</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_pfb_remove_dirty_regions_from_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_2d_helper_pfb_remove_dirty_regions_from_list
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_depose
</UL>

<P><STRONG><a name="[153]"></a>arm_2d_dynamic_dirty_region_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.arm_2d_dynamic_dirty_region_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = arm_2d_dynamic_dirty_region_init &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_allocate_scratch_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_init
</UL>

<P><STRONG><a name="[152]"></a>arm_2d_dynamic_dirty_region_depose</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_dynamic_dirty_region_depose))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = arm_2d_dynamic_dirty_region_depose &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_free_scratch_memory
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_depose
</UL>

<P><STRONG><a name="[154]"></a>arm_2d_dynamic_dirty_region_on_frame_start</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_2d_dynamic_dirty_region_on_frame_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = arm_2d_dynamic_dirty_region_on_frame_start &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_on_frame_start
</UL>

<P><STRONG><a name="[a0]"></a>arm_2d_dynamic_dirty_region_wait_next</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_2d_dynamic_dirty_region_wait_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = arm_2d_dynamic_dirty_region_wait_next &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_update_dirty_regions
</UL>

<P><STRONG><a name="[a1]"></a>arm_2d_dynamic_dirty_region_change_user_region_index_only</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_2d_dynamic_dirty_region_change_user_region_index_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = arm_2d_dynamic_dirty_region_change_user_region_index_only &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_update_dirty_regions
</UL>

<P><STRONG><a name="[98]"></a>__arm_2d_dynamic_dirty_region_update</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_dynamic_dirty_region_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = __arm_2d_dynamic_dirty_region_update &rArr; arm_2d_helper_pfb_get_absolute_location &rArr; arm_2d_get_absolute_location &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_get_absolute_location
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_update_dirty_regions
</UL>

<P><STRONG><a name="[159]"></a>arm_2d_helper_dirty_region_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_dirty_region_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = arm_2d_helper_dirty_region_init &rArr; arm_2d_dynamic_dirty_region_init &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_append_dirty_regions_to_list
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_append_scenes
</UL>

<P><STRONG><a name="[109]"></a>arm_2d_helper_dirty_region_depose</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_dirty_region_depose))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = arm_2d_helper_dirty_region_depose &rArr; arm_2d_dynamic_dirty_region_depose &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_depose
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_remove_dirty_regions_from_list
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_next_scene
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_delete_all_next_scene
</UL>

<P><STRONG><a name="[15b]"></a>arm_2d_helper_dirty_region_on_frame_start</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_dirty_region_on_frame_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = arm_2d_helper_dirty_region_on_frame_start &rArr; arm_2d_dynamic_dirty_region_on_frame_start &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_on_frame_start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
</UL>

<P><STRONG><a name="[9f]"></a>__arm_2d_helper_dirty_region_update_dirty_regions</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_helper_dirty_region_update_dirty_regions))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = __arm_2d_helper_dirty_region_update_dirty_regions &rArr; __arm_2d_dynamic_dirty_region_update &rArr; arm_2d_helper_pfb_get_absolute_location &rArr; arm_2d_get_absolute_location &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_dynamic_dirty_region_update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_change_user_region_index_only
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dynamic_dirty_region_wait_next
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_get_minimal_enclosure
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_scene_handler
</UL>

<P><STRONG><a name="[ba]"></a>arm_2d_helper_pfb_is_region_being_drawing</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.arm_2d_helper_pfb_is_region_being_drawing))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = arm_2d_helper_pfb_is_region_being_drawing &rArr; __arm_2d_tile_get_virtual_screen_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_virtual_screen_or_root
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_get_default_frame_buffer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_round_corner_box
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_is_region_active0
</UL>

<P><STRONG><a name="[144]"></a>arm_2d_get_default_frame_buffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.arm_2d_get_default_frame_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_round_corner_box
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_is_region_being_drawing
</UL>

<P><STRONG><a name="[111]"></a>__arm_2d_tile_get_virtual_screen_or_root</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_tile_get_virtual_screen_or_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = __arm_2d_tile_get_virtual_screen_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_is_root_tile
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_is_region_being_drawing
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_region_caculator
</UL>

<P><STRONG><a name="[107]"></a>arm_2d_scene_player_append_scenes</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.arm_2d_scene_player_append_scenes))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = arm_2d_scene_player_append_scenes &rArr; arm_2d_helper_dirty_region_init &rArr; arm_2d_dynamic_dirty_region_init &rArr; __arm_2d_allocate_scratch_memory &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_mono_clock_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
</UL>

<P><STRONG><a name="[10b]"></a>__arm_2d_scene_player_register_on_draw_navigation_event_handler</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_scene_player_register_on_draw_navigation_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = __arm_2d_scene_player_register_on_draw_navigation_event_handler &rArr; arm_2d_helper_pfb_update_dependency &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_update_dependency
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_navigator_init
</UL>

<P><STRONG><a name="[44]"></a>__disp_adapter0_draw_navigation</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.__disp_adapter0_draw_navigation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1316<LI>Call Chain = __disp_adapter0_draw_navigation &rArr; arm_lcd_printf &rArr; arm_lcd_puts &rArr; lcd_draw_char &rArr; arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_user_draw_navigation
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_font
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_location
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_draw_region
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_scale
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_line_spacing
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_char_spacing
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_opacity
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_display_mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_target_framebuffer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_colour
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async.specialized.1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_convert_ticks_to_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_reference_clock_frequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.__arm_2d_scene_player_register_on_draw_navigation_event_handler)
</UL>
<P><STRONG><a name="[142]"></a>arm_2d_scene_player_task</STRONG> (Thumb, 1962 bytes, Stack size 288 bytes, lto-llvm-1ddb82.o(.text.arm_2d_scene_player_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1548<LI>Call Chain = arm_2d_scene_player_task &rArr; arm_2d_helper_pfb_task &rArr; arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_next_scene
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_delete_all_next_scene
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_on_frame_start
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_update_dependency
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_disable_drawing_canvas_colour
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_enable_drawing_canvas_colour
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_task
</UL>

<P><STRONG><a name="[45]"></a>__pfb_draw_scene_handler</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__pfb_draw_scene_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = __pfb_draw_scene_handler &rArr; __arm_2d_helper_dirty_region_update_dirty_regions &rArr; __arm_2d_dynamic_dirty_region_update &rArr; arm_2d_helper_pfb_get_absolute_location &rArr; arm_2d_get_absolute_location &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_dirty_region_update_dirty_regions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.arm_2d_scene_player_task)
</UL>
<P><STRONG><a name="[46]"></a>__pfb_draw_scene_background_handler</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__pfb_draw_scene_background_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __pfb_draw_scene_background_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.arm_2d_scene_player_task)
</UL>
<P><STRONG><a name="[108]"></a>__arm_2d_scene_player_delete_all_next_scene</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_scene_player_delete_all_next_scene))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = __arm_2d_scene_player_delete_all_next_scene &rArr; arm_2d_helper_dirty_region_depose &rArr; arm_2d_dynamic_dirty_region_depose &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
</UL>

<P><STRONG><a name="[10a]"></a>__arm_2d_scene_player_next_scene</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_scene_player_next_scene))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = __arm_2d_scene_player_next_scene &rArr; arm_2d_helper_dirty_region_depose &rArr; arm_2d_dynamic_dirty_region_depose &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_dirty_region_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
</UL>

<P><STRONG><a name="[143]"></a>__draw_round_corner_box</STRONG> (Thumb, 2084 bytes, Stack size 392 bytes, lto-llvm-1ddb82.o(.text.__draw_round_corner_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 1508<LI>Call Chain = __draw_round_corner_box &rArr; arm_2dp_rgb565_fill_colour_with_mask_and_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_get_default_frame_buffer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_is_region_being_drawing
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async.specialized.1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_handler
</UL>

<P><STRONG><a name="[115]"></a>arm_sin_f32</STRONG> (Thumb, 244 bytes, Stack size 36 bytes, lto-llvm-1ddb82.o(.text.arm_sin_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_point
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel_init
</UL>

<P><STRONG><a name="[114]"></a>arm_cos_f32</STRONG> (Thumb, 252 bytes, Stack size 36 bytes, lto-llvm-1ddb82.o(.text.arm_cos_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_point
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel_init
</UL>

<P><STRONG><a name="[149]"></a>busy_wheel2_show</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.busy_wheel2_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172<LI>Call Chain = busy_wheel2_show &rArr; arm_2dp_rgb565_fill_colour_with_mask_and_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async.specialized.1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_is_time_out
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_convert_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_handler
</UL>

<P><STRONG><a name="[c7]"></a>__arm_2d_rgb565_unpack</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_rgb565_unpack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask_opacity
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask_opacity
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_a1_mask_opacity
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_with_opacity
</UL>

<P><STRONG><a name="[c8]"></a>__arm_2d_rgb565_pack</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __arm_2d_rgb565_pack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask_opacity
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask_opacity
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_a1_mask_opacity
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_with_opacity
</UL>

<P><STRONG><a name="[5a]"></a>__arm_2d_rgb565_sw_colour_filling_with_opacity</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_sw_colour_filling_with_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = __arm_2d_rgb565_sw_colour_filling_with_opacity &rArr; __arm_2d_impl_rgb565_colour_filling_with_opacity &rArr; __arm_2d_rgb565_unpack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_with_opacity
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_colour_filling
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_WITH_OPACITY_RGB565)
</UL>
<P><STRONG><a name="[fd]"></a>__arm_2d_impl_rgb16_colour_filling</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb16_colour_filling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __arm_2d_impl_rgb16_colour_filling
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb16_sw_colour_filling
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_opacity
</UL>

<P><STRONG><a name="[d3]"></a>__arm_2d_impl_rgb565_colour_filling_with_opacity</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb565_colour_filling_with_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_with_opacity &rArr; __arm_2d_rgb565_unpack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_opacity
</UL>

<P><STRONG><a name="[c9]"></a>__arm_2d_impl_rgb565_colour_filling_channel_mask</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb565_colour_filling_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_channel_mask &rArr; __arm_2d_rgb565_unpack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity
</UL>

<P><STRONG><a name="[cf]"></a>__arm_2d_impl_rgb565_colour_filling_mask</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb565_colour_filling_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_mask &rArr; __arm_2d_rgb565_unpack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity
</UL>

<P><STRONG><a name="[54]"></a>__arm_2d_rgb565_sw_colour_filling_with_a1_mask_and_opacity</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_sw_colour_filling_with_a1_mask_and_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = __arm_2d_rgb565_sw_colour_filling_with_a1_mask_and_opacity &rArr; __arm_2d_impl_rgb565_colour_filling_a1_mask_opacity &rArr; __arm_2d_rgb565_unpack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_a1_mask_opacity
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_fg_only
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_A1_MASK_AND_OPACITY_RGB565)
</UL>
<P><STRONG><a name="[c1]"></a>__arm_2d_impl_rgb16_draw_pattern_fg_only</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb16_draw_pattern_fg_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern_fg_only
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_a1_mask_and_opacity
</UL>

<P><STRONG><a name="[c6]"></a>__arm_2d_impl_rgb565_colour_filling_a1_mask_opacity</STRONG> (Thumb, 414 bytes, Stack size 96 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb565_colour_filling_a1_mask_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_a1_mask_opacity &rArr; __arm_2d_rgb565_unpack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_a1_mask_and_opacity
</UL>

<P><STRONG><a name="[56]"></a>__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = __arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity &rArr; __arm_2d_impl_rgb565_colour_filling_mask_opacity &rArr; __arm_2d_rgb565_unpack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask_opacity
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask_opacity
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_MASK_AND_OPACITY_RGB565)
</UL>
<P><STRONG><a name="[ca]"></a>__arm_2d_impl_rgb565_colour_filling_channel_mask_opacity</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb565_colour_filling_channel_mask_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_channel_mask_opacity &rArr; __arm_2d_rgb565_unpack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity
</UL>

<P><STRONG><a name="[d0]"></a>__arm_2d_impl_rgb565_colour_filling_mask_opacity</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb565_colour_filling_mask_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_mask_opacity &rArr; __arm_2d_rgb565_unpack &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity
</UL>

<P><STRONG><a name="[16c]"></a>__arm_2d_op_acquire</STRONG> (Thumb, 142 bytes, Stack size 36 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __arm_2d_op_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_tile_transform_xy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_a1_mask_and_opacity
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_draw_pattern
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb32_fill_colour
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_fill_colour
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_c8bit_fill_colour
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
</UL>

<P><STRONG><a name="[f7]"></a>__arm_2d_op_invoke</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_tile_transform_xy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_a1_mask_and_opacity
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_draw_pattern
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb32_fill_colour
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_fill_colour
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_c8bit_fill_colour
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
</UL>

<P><STRONG><a name="[124]"></a>__arm_2d_valid_mask</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_valid_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = __arm_2d_valid_mask &rArr; arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_xy_prepare
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_a1_mask_and_opacity
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
</UL>

<P><STRONG><a name="[53]"></a>__arm_2d_rgb16_sw_draw_pattern</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb16_sw_draw_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = __arm_2d_rgb16_sw_draw_pattern &rArr; __arm_2d_impl_rgb16_draw_pattern &rArr; __arm_2d_impl_rgb16_draw_pattern_bg_fg
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_DRAW_PATTERN_RGB16)
</UL>
<P><STRONG><a name="[c0]"></a>__arm_2d_impl_rgb16_draw_pattern</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb16_draw_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern &rArr; __arm_2d_impl_rgb16_draw_pattern_bg_fg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_bg_comp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_no_bg_comp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_bg_only
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_bg_fg
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_fg_only
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb16_sw_draw_pattern
</UL>

<P><STRONG><a name="[c2]"></a>__arm_2d_impl_rgb16_draw_pattern_bg_fg</STRONG> (Thumb, 256 bytes, Stack size 52 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb16_draw_pattern_bg_fg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern_bg_fg
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[c3]"></a>__arm_2d_impl_rgb16_draw_pattern_bg_only</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb16_draw_pattern_bg_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern_bg_only
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[c4]"></a>__arm_2d_impl_rgb16_draw_pattern_no_bg_comp</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb16_draw_pattern_no_bg_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern_no_bg_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[c5]"></a>__arm_2d_impl_rgb16_draw_pattern_bg_comp</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb16_draw_pattern_bg_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern_bg_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[55]"></a>__arm_2d_c8bit_sw_colour_filling</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_c8bit_sw_colour_filling))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_c8bit_sw_colour_filling &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_c8bit_colour_filling
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_C8BIT)
</UL>
<P><STRONG><a name="[97]"></a>__arm_2d_impl_c8bit_colour_filling</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_c8bit_colour_filling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __arm_2d_impl_c8bit_colour_filling
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_c8bit_sw_colour_filling
</UL>

<P><STRONG><a name="[57]"></a>__arm_2d_rgb16_sw_colour_filling</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb16_sw_colour_filling))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_rgb16_sw_colour_filling &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_colour_filling
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_RGB16)
</UL>
<P><STRONG><a name="[58]"></a>__arm_2d_rgb32_sw_colour_filling</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb32_sw_colour_filling))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_rgb32_sw_colour_filling &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb32_colour_filling
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_RGB32)
</UL>
<P><STRONG><a name="[fe]"></a>__arm_2d_impl_rgb32_colour_filling</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb32_colour_filling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __arm_2d_impl_rgb32_colour_filling
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb32_sw_colour_filling
</UL>

<P><STRONG><a name="[cc]"></a>__arm_2d_transform_regression</STRONG> (Thumb, 796 bytes, Stack size 160 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_transform_regression))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __arm_2d_transform_regression &rArr; __hardfp_lroundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsub_q16
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qadd_q16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_q16.323
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_q16_s16.322
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_q31
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_q16_q31
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_q31
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_q16_f32.321
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask_opacity_transform
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_chn_mask_opacity_transform
</UL>

<P><STRONG><a name="[11c]"></a>reinterpret_q16_f32.321</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.reinterpret_q16_f32.321))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reinterpret_q16_f32.321
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>

<P><STRONG><a name="[11d]"></a>arm_cos_q31</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.arm_cos_q31))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arm_cos_q31
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>

<P><STRONG><a name="[11e]"></a>reinterpret_q16_q31</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.reinterpret_q16_q31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reinterpret_q16_q31
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>

<P><STRONG><a name="[11f]"></a>arm_sin_q31</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.arm_sin_q31))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arm_sin_q31
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>

<P><STRONG><a name="[120]"></a>reinterpret_q16_s16.322</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.reinterpret_q16_s16.322))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reinterpret_q16_s16.322
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>

<P><STRONG><a name="[121]"></a>mul_q16.323</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.mul_q16.323))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mul_q16.323
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>

<P><STRONG><a name="[122]"></a>qadd_q16</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.qadd_q16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qadd_q16
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>

<P><STRONG><a name="[123]"></a>qsub_q16</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.qsub_q16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qsub_q16
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>

<P><STRONG><a name="[cd]"></a>reinterpret_s16_q16.320</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.reinterpret_s16_q16.320))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reinterpret_s16_q16.320
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_get_alpha_with_opacity
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_get_chn_alpha_with_opacity
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask_opacity_transform
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_chn_mask_opacity_transform
</UL>

<P><STRONG><a name="[d4]"></a>__arm_2d_rgb565_unpack.325</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_unpack.325))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_rgb565_unpack.325 &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_get_alpha_with_opacity
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_get_chn_alpha_with_opacity
</UL>

<P><STRONG><a name="[d5]"></a>__arm_2d_rgb565_pack.326</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_pack.326))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __arm_2d_rgb565_pack.326 &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_get_alpha_with_opacity
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_get_chn_alpha_with_opacity
</UL>

<P><STRONG><a name="[59]"></a>__arm_2d_rgb565_sw_colour_filling_with_mask_opacity_and_transform</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_rgb565_sw_colour_filling_with_mask_opacity_and_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = __arm_2d_rgb565_sw_colour_filling_with_mask_opacity_and_transform &rArr; __arm_2d_impl_rgb565_colour_filling_mask_opacity_transform &rArr; __arm_2d_transform_regression &rArr; __hardfp_lroundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask_opacity_transform
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_chn_mask_opacity_transform
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_WITH_MSK_OPACITY_AND_TRANSFORM_RGB565)
</UL>
<P><STRONG><a name="[cb]"></a>__arm_2d_impl_rgb565_colour_filling_chn_mask_opacity_transform</STRONG> (Thumb, 570 bytes, Stack size 184 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb565_colour_filling_chn_mask_opacity_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_chn_mask_opacity_transform &rArr; __arm_2d_transform_regression &rArr; __hardfp_lroundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_get_chn_alpha_with_opacity
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_s16_q16.320
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_opacity_and_transform
</UL>

<P><STRONG><a name="[d1]"></a>__arm_2d_impl_rgb565_colour_filling_mask_opacity_transform</STRONG> (Thumb, 570 bytes, Stack size 184 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb565_colour_filling_mask_opacity_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_mask_opacity_transform &rArr; __arm_2d_transform_regression &rArr; __hardfp_lroundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_get_alpha_with_opacity
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_s16_q16.320
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_regression
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_opacity_and_transform
</UL>

<P><STRONG><a name="[ce]"></a>__arm_2d_impl_rgb565_get_chn_alpha_with_opacity</STRONG> (Thumb, 586 bytes, Stack size 88 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb565_get_chn_alpha_with_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = __arm_2d_impl_rgb565_get_chn_alpha_with_opacity &rArr; __arm_2d_rgb565_unpack.325 &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack.326
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack.325
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_s16_q16.320
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_chn_mask_opacity_transform
</UL>

<P><STRONG><a name="[d2]"></a>__arm_2d_impl_rgb565_get_alpha_with_opacity</STRONG> (Thumb, 582 bytes, Stack size 88 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_impl_rgb565_get_alpha_with_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = __arm_2d_impl_rgb565_get_alpha_with_opacity &rArr; __arm_2d_rgb565_unpack.325 &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack.326
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack.325
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinterpret_s16_q16.320
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask_opacity_transform
</UL>

<P><STRONG><a name="[116]"></a>__arm_2d_transform_preprocess_source</STRONG> (Thumb, 1324 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_transform_preprocess_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = __arm_2d_transform_preprocess_source &rArr; arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_point
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_absolute_location
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_xy_prepare
</UL>

<P><STRONG><a name="[f9]"></a>arm_2d_tile_get_absolute_location</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.arm_2d_tile_get_absolute_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = arm_2d_tile_get_absolute_location &rArr; arm_2d_get_absolute_location &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_get_absolute_location
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_preprocess_source
</UL>

<P><STRONG><a name="[113]"></a>__arm_2d_transform_point</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_transform_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_transform_point &rArr; arm_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_preprocess_source
</UL>

<P><STRONG><a name="[170]"></a>arm_2dp_tile_transform_xy</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_tile_transform_xy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = arm_2dp_tile_transform_xy &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_preprocess_target
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_depose
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_tile_transform
</UL>

<P><STRONG><a name="[ed]"></a>__arm_2d_op_depose</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_depose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __arm_2d_op_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_on_leave
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_tile_transform_xy
</UL>

<P><STRONG><a name="[11a]"></a>__arm_2d_transform_preprocess_target</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_transform_preprocess_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __arm_2d_transform_preprocess_target &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_tile_transform_xy
</UL>

<P><STRONG><a name="[16e]"></a>arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_xy_prepare</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_xy_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_xy_prepare &rArr; __arm_2d_transform_preprocess_source &rArr; arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_transform_preprocess_source
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_valid_mask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_prepare
</UL>

<P><STRONG><a name="[16f]"></a>arm_2d_op_wait_async</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_2d_op_wait_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_2d_op_wait_async
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_opacity_and_transform_xy_prepare
</UL>

<P><STRONG><a name="[171]"></a>arm_extra_controls_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.arm_extra_controls_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = arm_extra_controls_init &rArr; arm_2d_helper_init &rArr; arm_2d_helper_built_in_init &rArr; busy_wheel_init &rArr; arm_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_flowing_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_drill_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinning_wheel_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_init
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
</UL>

<P><STRONG><a name="[172]"></a>spinning_wheel_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.spinning_wheel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spinning_wheel_init &rArr; arm_2d_op_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
</UL>

<P><STRONG><a name="[173]"></a>progress_bar_drill_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.progress_bar_drill_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = progress_bar_drill_init &rArr; arm_2d_helper_get_system_timestamp &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
</UL>

<P><STRONG><a name="[174]"></a>progress_bar_flowing_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.progress_bar_flowing_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = progress_bar_flowing_init &rArr; arm_2d_helper_get_system_timestamp &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_convert_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
</UL>

<P><STRONG><a name="[16a]"></a>arm_2d_op_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_op_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_2d_op_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinning_wheel_init
</UL>

<P><STRONG><a name="[d9]"></a>__arm_2d_sub_task_depose</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_sub_task_depose))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__depose_virtual_resource
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_origin_masks
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_origin
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill_origin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_with_mask
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill_with_mask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_tile_mask_process
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_tile_process
</UL>

<P><STRONG><a name="[10d]"></a>__depose_virtual_resource</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__depose_virtual_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_root
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>

<P><STRONG><a name="[110]"></a>__arm_2d_tile_get_root</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_tile_get_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_1st_derived_child_or_root
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__depose_virtual_resource
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_region_caculator
</UL>

<P><STRONG><a name="[10e]"></a>__arm_2d_tile_get_1st_derived_child_or_root</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_tile_get_1st_derived_child_or_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_is_root_tile
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_root
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
</UL>

<P><STRONG><a name="[10f]"></a>arm_2d_is_root_tile</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.arm_2d_is_root_tile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_2d_is_root_tile
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_1st_derived_child_or_root
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_virtual_screen_or_root
</UL>

<P><STRONG><a name="[e1]"></a>__arm_2d_issue_sub_task_tile_process</STRONG> (Thumb, 126 bytes, Stack size 216 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_issue_sub_task_tile_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = __arm_2d_issue_sub_task_tile_process &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
</UL>

<P><STRONG><a name="[e0]"></a>__arm_2d_issue_sub_task_tile_mask_process</STRONG> (Thumb, 190 bytes, Stack size 208 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_issue_sub_task_tile_mask_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = __arm_2d_issue_sub_task_tile_mask_process &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
</UL>

<P><STRONG><a name="[dd]"></a>__arm_2d_issue_sub_task_fill</STRONG> (Thumb, 190 bytes, Stack size 208 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_issue_sub_task_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = __arm_2d_issue_sub_task_fill &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[df]"></a>__arm_2d_issue_sub_task_fill_with_mask</STRONG> (Thumb, 370 bytes, Stack size 216 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_issue_sub_task_fill_with_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = __arm_2d_issue_sub_task_fill_with_mask &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[d8]"></a>__arm_2d_issue_sub_task_copy</STRONG> (Thumb, 198 bytes, Stack size 208 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_issue_sub_task_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = __arm_2d_issue_sub_task_copy &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[dc]"></a>__arm_2d_issue_sub_task_copy_with_mask</STRONG> (Thumb, 382 bytes, Stack size 216 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_issue_sub_task_copy_with_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = __arm_2d_issue_sub_task_copy_with_mask &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[de]"></a>__arm_2d_issue_sub_task_fill_origin</STRONG> (Thumb, 234 bytes, Stack size 208 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_issue_sub_task_fill_origin))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = __arm_2d_issue_sub_task_fill_origin &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[da]"></a>__arm_2d_issue_sub_task_copy_origin</STRONG> (Thumb, 244 bytes, Stack size 208 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_issue_sub_task_copy_origin))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = __arm_2d_issue_sub_task_copy_origin &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[db]"></a>__arm_2d_issue_sub_task_copy_origin_masks</STRONG> (Thumb, 440 bytes, Stack size 216 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_issue_sub_task_copy_origin_masks))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[f2]"></a>__arm_2d_op_ensure_resource</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_ensure_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __arm_2d_op_ensure_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
</UL>

<P><STRONG><a name="[ec]"></a>__arm_2d_op_frontend_on_leave</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_frontend_on_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __arm_2d_op_frontend_on_leave &rArr; __arm_2d_op_depose
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend
</UL>

<P><STRONG><a name="[eb]"></a>__arm_2d_op_frontend_op_decoder</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_frontend_op_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044<LI>Call Chain = __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_control
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_use_default_frame_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend
</UL>

<P><STRONG><a name="[ee]"></a>__arm_2d_op_use_default_frame_buffer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_use_default_frame_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __arm_2d_op_use_default_frame_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_op_decoder
</UL>

<P><STRONG><a name="[ef]"></a>__arm_2d_op_frontend_region_process_with_src</STRONG> (Thumb, 918 bytes, Stack size 120 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_frontend_region_process_with_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_non_negtive_location_pave
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_clipped_pave
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_ensure_resource
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_op_decoder
</UL>

<P><STRONG><a name="[f0]"></a>__arm_2d_op_frontend_region_process</STRONG> (Thumb, 322 bytes, Stack size 88 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_frontend_region_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = __arm_2d_op_frontend_region_process &rArr; __arm_2d_tile_process &rArr; __arm_2d_issue_sub_task_tile_process &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_ensure_resource
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_op_decoder
</UL>

<P><STRONG><a name="[f1]"></a>__arm_2d_op_frontend_control</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_frontend_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __arm_2d_op_frontend_control
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_op_decoder
</UL>

<P><STRONG><a name="[f5]"></a>__tile_clipped_pave</STRONG> (Thumb, 266 bytes, Stack size 96 bytes, lto-llvm-1ddb82.o(.text.__tile_clipped_pave))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clip_asset_tile
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
</UL>

<P><STRONG><a name="[f6]"></a>__tile_non_negtive_location_pave</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.__tile_non_negtive_location_pave))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = __tile_non_negtive_location_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
</UL>

<P><STRONG><a name="[f4]"></a>__arm_2d_tile_process</STRONG> (Thumb, 582 bytes, Stack size 176 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_tile_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = __arm_2d_tile_process &rArr; __arm_2d_issue_sub_task_tile_process &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clip_asset_tile
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_tile_mask_process
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_tile_process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_absolute_location
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_region_caculator
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
</UL>

<P><STRONG><a name="[112]"></a>__clip_asset_tile</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__clip_asset_tile))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = __clip_asset_tile &rArr; arm_2d_tile_generate_child &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_clipped_pave
</UL>

<P><STRONG><a name="[f8]"></a>__arm_2d_region_calculator</STRONG> (Thumb, 2588 bytes, Stack size 344 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_region_calculator))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__load_background_virtual_resource
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__load_virtual_resource
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_source_side_tile_mirror_preprocess
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_origin_masks
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_origin
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill_origin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_with_mask
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill_with_mask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_absolute_location
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_region_caculator
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_non_negtive_location_pave
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_clipped_pave
</UL>

<P><STRONG><a name="[fa]"></a>__arm_2d_source_side_tile_mirror_preprocess</STRONG> (Thumb, 354 bytes, Stack size 20 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_source_side_tile_mirror_preprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __arm_2d_source_side_tile_mirror_preprocess
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[fb]"></a>__load_virtual_resource</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__load_virtual_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __load_virtual_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[fc]"></a>__load_background_virtual_resource</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__load_background_virtual_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = __load_background_virtual_resource &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[ea]"></a>__arm_2d_op_frontend</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_op_frontend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_op_decoder
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_on_leave
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
</UL>

<P><STRONG><a name="[d6]"></a>__arm_2d_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__arm_2d_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __arm_2d_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_init
</UL>

<P><STRONG><a name="[169]"></a>arm_2d_is_point_inside_region</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.arm_2d_is_point_inside_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = arm_2d_is_point_inside_region &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_is_region_inside_target
</UL>

<P><STRONG><a name="[134]"></a>__disp_adapter0_user_draw_navigation</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, lto-llvm-1ddb82.o(.text.__disp_adapter0_user_draw_navigation))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __disp_adapter0_user_draw_navigation
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_draw_navigation
</UL>

<P><STRONG><a name="[4e]"></a>__disp_adapter0_pfb_render_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__disp_adapter0_pfb_render_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = __disp_adapter0_pfb_render_handler &rArr; Disp0_DrawBitmap &rArr; LCD_ShowPicture &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; spi_write_read_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_report_rendering_complete
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp0_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata..L__const.__user_scene_player_init.tCFG)
</UL>
<P><STRONG><a name="[146]"></a>__disp_adapter0_user_on_frame_complete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__disp_adapter0_user_on_frame_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __disp_adapter0_user_on_frame_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_each_frame_complete
</UL>

<P><STRONG><a name="[186]"></a>disp_adapter0_navigator_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.disp_adapter0_navigator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = disp_adapter0_navigator_init &rArr; __arm_2d_scene_player_register_on_draw_navigation_event_handler &rArr; arm_2d_helper_pfb_update_dependency &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_register_on_draw_navigation_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
</UL>

<P><STRONG><a name="[14d]"></a>__user_scene_player_init</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, lto-llvm-1ddb82.o(.text.__user_scene_player_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = __user_scene_player_init &rArr; arm_2d_helper_pfb_init &rArr; arm_2d_helper_init &rArr; arm_2d_helper_built_in_init &rArr; busy_wheel_init &rArr; arm_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
</UL>

<P><STRONG><a name="[0]"></a>__pfb_draw_handler</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, lto-llvm-1ddb82.o(.text.__pfb_draw_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1580<LI>Call Chain = __pfb_draw_handler &rArr; __draw_round_corner_box &rArr; arm_2dp_rgb565_fill_colour_with_mask_and_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_round_corner_box
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async.specialized.1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.data.disp_adapter0_init.s_tScenes)
</UL>
<P><STRONG><a name="[1]"></a>__on_frame_start</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.__on_frame_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __on_frame_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.data.disp_adapter0_init.s_tScenes)
</UL>
<P><STRONG><a name="[2]"></a>__on_frame_complete</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.__on_frame_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __on_frame_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.data.disp_adapter0_init.s_tScenes)
</UL>
<P><STRONG><a name="[4f]"></a>__on_each_frame_complete</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, lto-llvm-1ddb82.o(.text.__on_each_frame_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = __on_each_frame_complete &rArr; arm_2d_helper_is_frame_skipped &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disp_adapter0_user_on_frame_complete
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_is_frame_skipped
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata..L__const.__user_scene_player_init.tCFG)
</UL>
<P><STRONG><a name="[52]"></a>__utf8_a1_font_get_char_descriptor.678</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, lto-llvm-1ddb82.o(.text.__utf8_a1_font_get_char_descriptor.678))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = __utf8_a1_font_get_char_descriptor.678 &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.rodata.ARM_2D_FONT_SQUARE_DIGITS_24_A1)
</UL>
<P><STRONG><a name="[3f]"></a>__pfb_draw_scene_mono_clock_handler</STRONG> (Thumb, 2872 bytes, Stack size 344 bytes, lto-llvm-1ddb82.o(.text.__pfb_draw_scene_mono_clock_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612<LI>Call Chain = __pfb_draw_scene_mono_clock_handler &rArr; arm_lcd_printf &rArr; arm_lcd_puts &rArr; lcd_draw_char &rArr; arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_puts
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_lcd_get_string_line_box
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_font
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_draw_region
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_force_char_use_same_width
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_scale
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_display_mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_target_framebuffer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_colour
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_reset_display_region_tracking
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async.specialized.1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init)
</UL>
<P><STRONG><a name="[40]"></a>__on_scene_mono_clock_load</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__on_scene_mono_clock_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __on_scene_mono_clock_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init)
</UL>
<P><STRONG><a name="[41]"></a>__on_scene_mono_clock_frame_start</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, lto-llvm-1ddb82.o(.text.__on_scene_mono_clock_frame_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = __on_scene_mono_clock_frame_start &rArr; arm_2d_dirty_region_item_ignore_set &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_dirty_region_item_ignore_set
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_convert_ticks_to_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init)
</UL>
<P><STRONG><a name="[42]"></a>__on_scene_mono_clock_frame_complete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__on_scene_mono_clock_frame_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __on_scene_mono_clock_frame_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init)
</UL>
<P><STRONG><a name="[43]"></a>__on_scene_mono_clock_depose</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lto-llvm-1ddb82.o(.text.__on_scene_mono_clock_depose))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __on_scene_mono_clock_depose &rArr; __arm_2d_free_scratch_memory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_free_scratch_memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.text.__arm_2d_scene_mono_clock_init)
</UL>
<P><STRONG><a name="[188]"></a>stdout_putchar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lto-llvm-1ddb82.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[94]"></a>abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.abort))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[5b]"></a>__perf_counter_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.__perf_counter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __perf_counter_init &rArr; init_cycle_counter &rArr; update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-1ddb82.o(.init_array)
</UL>
<P><STRONG><a name="[189]"></a>perfc_port_disable_global_interrupt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.perfc_port_disable_global_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = perfc_port_disable_global_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_insert_to_system_timer_insert_ovf_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[18b]"></a>perfc_port_init_system_timer</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.perfc_port_init_system_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = perfc_port_init_system_timer &rArr; perfc_port_resume_global_interrupt.816
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_resume_global_interrupt.816
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_disable_global_interrupt.815
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[18c]"></a>perfc_port_clear_system_timer_ovf_pending</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.perfc_port_clear_system_timer_ovf_pending))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[18a]"></a>perfc_port_resume_global_interrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.perfc_port_resume_global_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = perfc_port_resume_global_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_insert_to_system_timer_insert_ovf_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[18d]"></a>update_perf_counter</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lto-llvm-1ddb82.o(.text.update_perf_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_resume_global_interrupt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_disable_global_interrupt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_get_system_timer_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[179]"></a>check_systick</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lto-llvm-1ddb82.o(.text.check_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_get_system_timer_top
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_is_system_timer_ovf_pending
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_get_system_timer_elapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>

<P><STRONG><a name="[17a]"></a>perfc_port_get_system_timer_elapsed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.perfc_port_get_system_timer_elapsed))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
</UL>

<P><STRONG><a name="[17b]"></a>perfc_port_is_system_timer_ovf_pending</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.perfc_port_is_system_timer_ovf_pending))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
</UL>

<P><STRONG><a name="[17c]"></a>perfc_port_get_system_timer_top</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-1ddb82.o(.text.perfc_port_get_system_timer_top))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_insert_to_system_timer_insert_ovf_handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
</UL>

<P><STRONG><a name="[1a4]"></a>perfc_port_disable_global_interrupt.815</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.perfc_port_disable_global_interrupt.815))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = perfc_port_disable_global_interrupt.815
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_init_system_timer
</UL>

<P><STRONG><a name="[1a5]"></a>perfc_port_resume_global_interrupt.816</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-1ddb82.o(.text.perfc_port_resume_global_interrupt.816))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = perfc_port_resume_global_interrupt.816
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_init_system_timer
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
